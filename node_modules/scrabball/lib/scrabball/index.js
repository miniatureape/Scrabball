exports.GameManager = function(socket){
    this.socket = socket;
    this.games = {};

    this.newId = function() {
        var id = Math.ceil(Math.random() * 99999);
        return this.games[id] && this.newId() || id;
    };

};

exports.GameManager.prototype =  {

    joinGame: function(id, client) {

        if (!this.games[id]) {
            this.send(client, 'error', 'no game with id: ' + id);
            return;
        }

        var game = this.games[id];
        if (game.waiting()) {
            game.addPlayer(client);
            game.initializeBalls();
            this.send(game.players, 'ready', {ballVals: game.balls});
        } else {
            this.send(client, 'error', 'game is already populated: ' + id);
        }
    },

    createGame: function(client) {
        var id = this.newId();
        game = new Game(id);
        game.addPlayer(client);
        
        this.send(client, 'id', {id: id});

        return game;
    },

    start: function(val, client) {
        var game;

        if(val.id) {
            this.joinGame(val.id, client);
        } else {
            game = this.createGame(client);
            this.games[game.id] = game;
        }
    },

    send: function(clients, type, val) {
        var msg = {type:type, val:val};

        if (clients.length) {
            var len = clients.length;
            for (var i = 0; i < len; i++) {
                this.send(clients[i], type, val);
            }
        } else {
            clients.send(msg);
        }

    },

}

var INITIAL_BALLS = 10;

var Game = function(id) {
    this.id = id;
    this.score = {};
    this.players = [];
}

Game.prototype = {

    waiting: function() {
        return this.players.length === 1;
    }, 

    ready: function() {
        return this.players.length === 2;
    },

    addPlayer: function(client) {
        if (this.players.length >= 2) return;
        this.players.push(client);
    }, 

    getPlayer: function(num) {
        return this.player[num];
    },

    getOpponent: function(client) {
        return this.players[0] === client ? this.players[1] : this.players[0];
    },

    initializeBalls: function() {
        var balls = [];
        for (var i = 0; i < INITIAL_BALLS; i++) {
            var charCode = Math.floor(Math.random() * 26) + 65;
            balls.push(String.fromCharCode(charCode));
        }
        this.balls = balls;
    },
}
